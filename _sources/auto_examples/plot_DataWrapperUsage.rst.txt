
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_DataWrapperUsage.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_DataWrapperUsage.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_DataWrapperUsage.py:


.. _data-wrap-ex:

Examples Using the Main Data Wrappers from crispy
=================================================

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Here, we provide a brief introduction on how to use the main data structures
defined in ``crispy.crisp``. Specifically, these examples will cover the
``CRISP``, ``CRISPNonU``, and ``CRISPWideband`` structures.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default


    from crispy import CRISP, CRISPWideband
    import warnings

    warnings.filterwarnings("ignore")








.. GENERATED FROM PYTHON SOURCE LINES 19-27

CRISP
-----
To demonstrate the CRISP class we use an example of a CRISP observation from
the M1.1 solar flare SOL20140906T17:09 observed by SST/CRISP in
H:math:`\alpha` and Ca II 8542. The data is publicly avaiable through the
F-CHROMA project `here
<https://star.pst.qub.ac.uk/wiki/doku.php/public/solarflares/start>`_. Below
we show the data for H :math:`\alpha`.

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default


    crisp = CRISP("example_data/2014/crisp_l2_20140906_152724_6563_r00447.fits")
    print(crisp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


            CRISP Observation
            ------------------
            2014-09-06 16:53:39.174

            Observed: H I 6563
            Centre wavelength [Å]: 6564.58
            Wavelengths sampled: 15 ([6563.18399967 6563.38399971 6563.58399976 6563.78399981 6563.98399986
     6564.1839999  6564.38399995 6564.584      6564.78400005 6564.9840001
     6565.18400014 6565.38400019 6565.58400024 6565.78400029 6565.98400033] Angstrom)
            Pointing [arcsec] (HPLN, HPLT): (-730.032, -313.398)
            Shape: [15, 1398, 1473]




.. GENERATED FROM PYTHON SOURCE LINES 32-36

The data structures use slicing derived from astropy's `NDData
<https://docs.astropy.org/en/stable/nddata/>`_ meaning the objects can be
directly sliced to produce new objects of just the slice e.g. for only looking
at the far blue wing data in our observation

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default


    print(crisp[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


            CRISP Observation
            ------------------
            2014-09-06 16:53:39.174

            Observed: H I 6563
            Centre wavelength [Å]: 6564.58
            Wavelengths sampled: 15 (6563.183999666214 Angstrom)
            Pointing [arcsec] (HPLN, HPLT): (-730.032, -313.398)
            Shape: [1398, 1473]




.. GENERATED FROM PYTHON SOURCE LINES 40-44

This is also the easiest way to use the plotting methods. For this
observation, to view an image at a specific wavelength we would use the
``intensity_map`` instance method as shown below for the line core of the
H :math:`\alpha` observation

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default


    crisp[7].intensity_map()




.. image-sg:: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_001.png
   :alt: 2014-09-06T16:53:39.174 λ=6564.58Å (Δλ = -0.0Å)
   :srcset: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 48-52

We can then use slicing and the ``plot_spectrum`` instance method to plot the
spectrum at a certain spatial point. Firstly though to identify the slice we
need we use the ``from_lonlat`` instance method, in this example we take the
point :math:`(-720'', -310'')` in the Helioprojective plane:

.. GENERATED FROM PYTHON SOURCE LINES 54-62

.. note::
  There are complimentary instance methods ``from_lonlat`` and
  ``to_lonlat`` which convert coordinates to/from the Helioprojective frame.
  The format of the Helioprojective coordinates are **always** given in the
  format (longitude, latitude) while image plane coordinates are **always**
  given in (y,x) pixels. This is to allow the direct indexing of the objects
  via the image plane corrdinates while maintaining the Helioprojective (and
  other physical coordinate systems) convention of (longitude, latitude).

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: default


    y, x = crisp.from_lonlat(-720, -310)
    print(y, x)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    759 912




.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: default


    crisp[:, y, x].plot_spectrum()




.. image-sg:: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_002.png
   :alt: 2014-09-06T16:53:39.174 H I 6563 Å Stokes I [DNs]
   :srcset: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-76

CRISPNonU
---------
For the CRISPNonU class, we choose an imaging spectropolarimetric Ca II 8542
observation of the X2.2 solar flare SOL20170906T09:10.

.. GENERATED FROM PYTHON SOURCE LINES 76-80

.. code-block:: default


    crispnonu = CRISP("example_data/2017/ca_00001.zarr")
    print(crispnonu)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


            CRISP Observation
            ------------------
            2017-09-06 09:04:45.591

            Observed: Ca II 8542
            Centre wavelength [Å]: 8544.44
            Wavelengths sampled: 11 ([8541.3 8541.5 8541.7 8541.8 8541.9 8542.  8542.1 8542.2 8542.3 8542.5
     8542.7] Angstrom)
            Pointing [arcsec] (HPLN, HPLT): (523.598, -233.293)
            Shape: [4, 11, 977, 985]




.. GENERATED FROM PYTHON SOURCE LINES 81-89

The ``intensity_map`` and ``plot_spectrum`` methods will also work here with
the correct slicing -- that is, the object will need to be sliced twice for
the ``intensity_map`` instance method and thrice for the ``plot_spectrum``
instance method. The main difference from the CRISPNonU class can be seen in
the wavelengths sampled section: the wavelengths are sampled non-uniformly but
the class deals with this for us. Here, we will show the polarimetric instance
methods (which also exist in the ``CRISP`` class). Firstly is ``stokes_map``
for the line core:

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: default


    crispnonu[:, 5].stokes_map(stokes="all")




.. image-sg:: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_003.png
   :alt: Stokes I, Stokes Q, Stokes U, Stokes V
   :srcset: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-99

The polarimetric plotting methods take a keyword argument ``stokes`` which is
a string specifying which of the Stokes parameters the user would like to
plot. In the example above we have used "all" to plot the maps of all of the
Stokes parameters at line centre. However, if the user would like to only
display Stokes I, Q and V this can be accomplished by setting ``stokes =
"IQV"``.

.. GENERATED FROM PYTHON SOURCE LINES 101-104

We can then identify a point to view the Stokes profiles using the
``from_lonlat`` instance method as before and plot the Stokes profiles using
the ``plot_stokes`` instance method:

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default


    y, x = crispnonu.from_lonlat(510, -260)
    print(y, x)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    38 257




.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: default


    crispnonu[:, :, 38, 257].plot_stokes(stokes="all")




.. image-sg:: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_004.png
   :alt: 2017-09-06T09:04:45.591 Ca II 8542 Å All  Stokes
   :srcset: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 114-118

CRISPWideband
-------------
For the CRISPWideband class, we use the complimentary wideband Ca II 8542 for
the observation shown as an example for the CRISPNonU class, above.

.. GENERATED FROM PYTHON SOURCE LINES 118-122

.. code-block:: default


    crispwideband = CRISPWideband("example_data/2017/wideband/ca_00001.zarr")
    print(crispwideband)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


            CRISP Wideband Context Image
            ------------------
            2017-09-06 09:04:45.591

            Observed: Ca II 8542
            Pointing: (523.598, -233.293)
            Shape: [977, 985]




.. GENERATED FROM PYTHON SOURCE LINES 123-125

The CRISPWideband class has one useful plotting instance method, that is
``intensity_map``:

.. GENERATED FROM PYTHON SOURCE LINES 125-128

.. code-block:: default


    crispwideband.intensity_map()




.. image-sg:: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_005.png
   :alt: 2017-09-06T09:04:45.591 Ca II 8542 Å (wideband)
   :srcset: /auto_examples/images/sphx_glr_plot_DataWrapperUsage_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-131

CRISPWideband can also utilise the ``from_lonlat`` and ``to_lonlat`` instance
methods.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.967 seconds)


.. _sphx_glr_download_auto_examples_plot_DataWrapperUsage.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_DataWrapperUsage.py <plot_DataWrapperUsage.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_DataWrapperUsage.ipynb <plot_DataWrapperUsage.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
