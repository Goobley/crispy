
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_GettingStarted.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_GettingStarted.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_GettingStarted.py:


.. _quick-start:

Quick Start Guide to crispy
===========================

.. GENERATED FROM PYTHON SOURCE LINES 9-12

The following is a quick guide on how to get started with crispy. This will
cover the basic data wrapper and its constituent properties. For a more
in-depth look at the other data wrappers please refer to :ref:`data-wrap-ex`.

.. GENERATED FROM PYTHON SOURCE LINES 14-22

The first thing to do is to import the default data wrapper ``CRISP``. This is
the base used for alll of the data objects in the package. ``CRISP`` assumes
that your observations are either imaging spectroscopic or imaging
spectropolarimetric (although it'll give its best at any 3D or 4D data) and is
given either as a `FITS file
<https://fits.gsfc.nasa.gov/fits_standard.html>`_, a `zarr file
<https://zarr.readthedocs.io/en/stable/>`_ or an object dictionary (see
:ref:`utils`).

.. GENERATED FROM PYTHON SOURCE LINES 22-29

.. code-block:: default


    from crispy import CRISP
    import matplotlib.pyplot as plt
    import warnings

    warnings.filterwarnings("ignore")








.. GENERATED FROM PYTHON SOURCE LINES 30-32

The only argument we need now to create our data object is the path to the
file:

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default


    c_ex = CRISP("example_data/2014/crisp_l2_20140906_152724_6563_r00447.fits")








.. GENERATED FROM PYTHON SOURCE LINES 36-39

Our example object ``c_ex`` is now a ``CRISP`` object containing this
observation. We can get details of the following observation doing the
following

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default


    print(c_ex)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


            CRISP Observation
            ------------------
            2014-09-06 16:53:39.174

            Observed: H I 6563
            Centre wavelength [Å]: 6564.58
            Wavelengths sampled: 15 ([6563.18399967 6563.38399971 6563.58399976 6563.78399981 6563.98399986
     6564.1839999  6564.38399995 6564.584      6564.78400005 6564.9840001
     6565.18400014 6565.38400019 6565.58400024 6565.78400029 6565.98400033] Angstrom)
            Pointing [arcsec] (HPLN, HPLT): (-730.032, -313.398)
            Shape: [15, 1398, 1473]




.. GENERATED FROM PYTHON SOURCE LINES 43-48

All data objects in crispy can be indexed in a similar manner to `numpy arrays
<https://numpy.org/doc/stable/reference/arrays.indexing.html>`_. For example,
our data above is sampled at 15 different wavelengths, say we only wanted to
work with the imaging data from the fourth wavelength then we could create a
new object as such:

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default


    c_sub = c_ex[3]  # remember Python indexing starts at 0!








.. GENERATED FROM PYTHON SOURCE LINES 52-56

And this ``c_sub`` object will contain the data for only the fourth wavelength
in our original data. This kind of slicing is useful as the whole object is
sliced rather than just the ``.data`` property allowing us to keep everything
together.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

This is also how the plotting methods work, they expect a slice of the object
otherwise an error will be thrown. For example,

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default


    c_sub.intensity_map()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_GettingStarted_001.png
   :alt: 2014-09-06T16:53:39.174 λ=6563.78Å (Δλ = -0.8Å)
   :srcset: /auto_examples/images/sphx_glr_plot_GettingStarted_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.421 seconds)


.. _sphx_glr_download_auto_examples_plot_GettingStarted.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_GettingStarted.py <plot_GettingStarted.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_GettingStarted.ipynb <plot_GettingStarted.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
